Visualize:Property%20Sets matrix VisPropertySets= 0 1 // row titles are properties in the form "SRCD.Left", columns are property sets
System:Version matrix OperatorVersion= { Framework Revision Build Config Protocol } 1 3.6.6247.49 6247.49,%202021-03-11T21:31:50Z MSVC-19.21.27702.2-AMD64,%20release,%202021-03-22T20:21:16Z,%20schalkadmin@DESKTOP-OTQRNP6 USE_DYNAMIC_CRT:TRUE%20USE_OPENMP:ON%20USE_PRECOMPILED_HEADERS:ON%20USE_ASSERTS_IN_RELEASE_BUILDS:OFF 2.3 // operator module version information (noedit)(readonly)
System:Protocol int AutoConfig= 1 1 0 1 // Use AutoConfig protocol extension (boolean)
System:Protocol int OperatorBackLink= 1 1 0 1 // Send final state and signal information to Operator (boolean)
System:Core%20Connections string OperatorIP= 127.0.0.1 127.0.0.1 % % // the Operator module's IP (noedit)(readonly)
Filtering:Windowing int WindowLength= 0.5s 0.5s % % // Length of window
Filtering:Windowing int Detrend= 1 0 0 2 // Detrend data? 0: no, 1: mean, 2: linear (enumeration)
Filtering:Windowing int WindowFunction= 0 0 0 3 // Window function 0: Rectangular, 1: Hamming, 2: Hann, 3: Blackman (enumeration)
Filtering:Spectral%20Estimation float FirstBinCenter= 0Hz 0Hz % % // Center of first frequency bin (in Hz) (allow_override)
Filtering:Spectral%20Estimation float LastBinCenter= 30Hz 30Hz % % // Center of last frequency bin (in Hz) (allow_override)
Filtering:Spectral%20Estimation float BinWidth= 3Hz 3Hz % % // Width of spectral bins (in Hz) (allow_override)
Filtering:Spectral%20Estimation int OutputType= 0 0 0 2 // 0: Spectral Amplitude, 1: Spectral Power, 2: Coefficients (enumeration) (allow_override)
Filtering:AR%20Spectral%20Estimator int ModelOrder= 20 16 0 % // AR model order
Filtering:AR%20Spectral%20Estimator int EvaluationsPerBin= 15 15 1 % // Number of uniformly spaced evaluation points entering into a single bin value
Filtering:Spectral%20Estimation int SpectralEstimator= 1 1 0 2 // Choice of spectral estimation algorithm, 0: None, 1: AR, 2: FFT (enumeration)
Visualize:Processing%20Stages int VisualizeSpatialFilter= 0 0 0 1 // Visualize SpatialFilter output (boolean)
Filtering:SpatialFilter int SpatialFilterType= 3 2 0 3 // spatial filter type 0: none, 1: full matrix, 2: sparse matrix, 3: common average reference (CAR) (enumeration)
Filtering:SpatialFilter matrix SpatialFilter= { C3_OUT Cz_OUT C4_OUT } { P3 C3 F3 Fz F4 C4 P4 Cz Pz Fp1 Fp2 T3 T5 O1 O2 X3 X2 F7 F8 X1 A2 T6 T4 TRG } -0.25 0.00 -0.25 1.00 -0.25 0.00 0.00 -0.25 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -0.20 -0.20 0.00 -0.20 1.00 -0.20 0.00 -0.20 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.00 -0.25 0.00 0.00 -0.25 1.00 -0.25 -0.25 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 % % // columns represent input channels, rows represent output channels
Filtering:SpatialFilter intlist SpatialFilterCAROutput= 3 F3 Fz F4 // when using CAR filter type: list of output channels, or empty for all channels
Filtering:SpatialFilter int SpatialFilterMissingChannels= 0 0 0 1 // how to handle missing channels 0: ignore, 1: report error (enumeration)
Visualize:Processing%20Stages int VisualizeSpectralEstimator= 0 0 0 1 // Visualize SpectralEstimator output (boolean)
Filtering:LinearClassifier matrix Classifier= 1 { input%20channel input%20element%20(bin) output%20channel weight } F3 5Hz 2 1 // Linear classification matrix in sparse representation
Visualize:Processing%20Stages int VisualizeLinearClassifier= 0 0 0 1 // Visualize LinearClassifier output (boolean)
Filtering:LPFilter float LPTimeConstant= 1s 16s 0 % // time constant for the low pass filter
Visualize:Processing%20Stages int VisualizeLPFilter= 0 0 0 1 // Visualize LPFilter output (boolean)
Filtering:ExpressionFilter string StartRunExpression= % // expression executed on StartRun
Filtering:ExpressionFilter string StopRunExpression= % // expression executed on StopRun
Filtering:ExpressionFilter matrix Expressions= 0 1 // expressions used to compute the output of the ExpressionFilter (rows are channels; empty matrix for none)
Visualize:Processing%20Stages int VisualizeExpressionFilter= 0 0 0 1 // Visualize ExpressionFilter output (boolean)
Filtering:Normalizer floatlist NormalizerOffsets= 2 0 24 0 % % // normalizer offsets
Filtering:Normalizer floatlist NormalizerGains= 2 0 0.7 0 % % // normalizer gain values
Filtering:Normalizer intlist Adaptation= 2 0 0 0 0 2 // 0: no adaptation, 1: zero mean, 2: zero mean, unit variance (enumeration)
Filtering:Normalizer matrix BufferConditions= 2 2 0 0 0 BaselineOn==1 // expressions corresponding to data buffers (columns correspond to output channels, multiple rows correspond to multiple buffers)
Filtering:Normalizer float BufferLength= 20s 9s % % // time window of past data per buffer that enters into statistic
Filtering:Normalizer string UpdateTrigger= (Feedback==0) // expression to trigger offset/gain update when changing from 0 (use empty string for continuous update)
Visualize:Processing%20Stages int VisualizeNormalizer= 1 0 0 1 // Visualize Normalizer output (boolean)
Visualize:Processing%20Stages int VisualizeHandVibrationFilter= 0 0 0 1 // Visualize HandVibrationFilter output (boolean)
Filtering:HandVibrationFilter int ActivateHandVibration= 1 0 0 1 // (boolean)
Filtering:HandVibrationFilter string COMPort= COM5 // COM port the Arduino is connected to
Filtering:HandVibrationFilterc matrix Configurations= { Configuration%20Expression Amplitude Frequency } { Configuration%201 Configuration%202 Configuration%203 Configuration%204 } Frequency==1 Frequency==2 Frequency==3 Frequency==4 17 17 17 17 4 5 6 7 
Filtering:HandVibrationFilter int UseStateModulation= 1 0 0 1 // Use state value to modulate amplitude (boolean)
Filtering:HandVibrationFilter int DecimationOfModulation= 2 1 1 % 
Filtering:HandVibrationFilter string ModulationState= Amplitude 
System:Core%20Connections string OperatorAddress= 127.0.0.1:4002 // (noedit)
System:Core%20Connections string SignalProcessingIP= 127.0.0.1 // (readonly)(noedit)
System:Core%20Connections string SignalProcessingPort= 63476 // (readonly)(noedit)
System:Version matrix SignalProcessingVersion= { Framework Revision Build Config Protocol } 1 3.6.6312.-1 6312.?,%202021-06-18T18:43:48Z MSVC-19.28.29913.0-AMD64,%20release,%202021-07-19Z,%20pldem@DESKTOP-2V61IP1 USE_DYNAMIC_CRT:TRUE%20USE_OPENMP:ON%20USE_PRECOMPILED_HEADERS:ON%20USE_ASSERTS_IN_RELEASE_BUILDS:OFF 2.3 // SignalProcessing version information (noedit)(readonly)
System:Configuration matrix SignalProcessingFilterChain= 7 { Filter%20Name Position%20String } SpatialFilter 2.B SpectralEstimator 2.C LinearClassifier 2.D LPFilter 2.D1 ExpressionFilter 2.D2 Normalizer 2.E HandVibrationFilter 2.F // SignalProcessing filter chain (noedit)(readonly)
System:Configuration matrix Filters= 20 1 /2/SpatialFilter /2/SpectralEstimator/WindowingFilter /2/SpectralEstimator/SpectralEstimatorChoice/IdentityFilter /2/SpectralEstimator/SpectralEstimatorChoice/ARSpectrum /2/SpectralEstimator/SpectralEstimatorChoice/FFTSpectrum /2/LinearClassifier /2/LPFilter /2/ExpressionFilter /2/Normalizer /2/HandVibrationFilter /3/ConnectorInput /3/PythonAppFilter /3/KeystrokeFilter /3/ConnectorOutput /1/DataIOFilter /1/BufferedADC /1/BCI2000FileWriter /1/SourceFilter /1/AlignmentFilter /1/TransmissionFilter // Filter Directory (noedit)(readonly)
Connector:ConnectorInput list ConnectorInputFilter= 0 // list of state names or signal elements to allow, "*" for any, signal elements as in "Signal(1,0)"
Connector:ConnectorInput string ConnectorInputAddress= % localhost:20320 % % // IP address/port to read from, e.g. localhost:20320
Visualize:Processing%20Stages int VisualizePythonAppFilter= 0 0 0 1 // Visualize PythonAppFilter output (boolean)
Application:Human%20Interface%20Devices string KeystrokeStateName= % // State to be translated into keystrokes (0-F), empty for off
Application:Human%20Interface%20Devices string KeystrokeExpression= % // Expression that evaluates to a virtual keycode, empty for off
Application:Human%20Interface%20Devices string KeystrokeExpressionOnStartRun= % // Expression that initializes expression variables on StartRun
Connector:ConnectorOutput string ConnectorOutputAddress= % localhost:20321 % % // one or more IP:Port combinations, e.g. localhost:20321
System:Command%20Line%20Arguments variant PythonAppClassFile= TriangleApplicationPsychoPy.py VibrotactileCursorTaskWPrime.py VibrotactileCursorTaskWPrime.py VibrotactileCursorTaskWPrime.py 
System:Command%20Line%20Arguments variant PythonAppShell= 0 0 0 0 
System:Command%20Line%20Arguments variant PythonAppLog= Applogger.txt Applogger.txt Applogger.txt Applogger.txt 
System:Core%20Connections string ApplicationIP= 127.0.0.1 // (readonly)(noedit)
System:Core%20Connections string ApplicationPort= 63500 // (readonly)(noedit)
Source:Signal%20Properties:DataIOFilter list ReferenceChannelName= 0 % % a // list of labels for reference channel or channels
Source:Signal%20Properties:DataIOFilter list GroundChannelName= 0 % % a // label of the ground channel
Source:Playback int EnslavePython= 0 0 0 1 // force BCPy2000 modules to follow states supplied by the source module without being able to change them (boolean)
PythonApp string ApplicationDescription= the%20techno%20triangle % a z // Identifies the stimulus presentation module
PythonApp int ShowSignalTime= 0 0 0 1 // show a timestamp based on the number of processed samples (boolean)
PythonApp:Design int TrialsPerBlock= 20 20 1 % // number of trials in one block
PythonApp:Design int BlocksPerRun= 1 20 1 % // number of sub-blocks in one run
PythonApp:Design int ShowFixation= 0 0 0 1 // show a fixation point in the center (boolean)
PythonApp:Screen int ScreenId= -1 -1 % % // on which screen should the stimulus window be opened - use -1 for last
PythonApp:Screen float WindowSize= 1 1.0 0.0 1.0 // size of the stimulus window, proportional to the screen
PythonApp:Stimuli float RectangleSize= 1.0 1.0 0.0 10.0 
PythonApp:Stimuli int CursorMovement= 1 1 % % // Enables Cursor movement; use 1 for movement, 0 for stationary
PythonApp:Stimuli int NumberDisplayed= 1 1 % % // 1 for displaying the number from start to stop, 0 for no number 
System:Version matrix ApplicationVersion= { Framework Revision Build Config Protocol } 1 3.6.6312.2 6312.2,%202021-06-18T18:43:48Z MSVC-19.28.29913.0-AMD64,%20release,%202021-06-18T22:43:16Z,%20pldem@DESKTOP-2V61IP1 USE_DYNAMIC_CRT:TRUE%20USE_OPENMP:ON%20USE_PRECOMPILED_HEADERS:ON%20USE_ASSERTS_IN_RELEASE_BUILDS:OFF 2.3 // Application version information (noedit)(readonly)
System:Configuration matrix ApplicationFilterChain= 4 { Filter%20Name Position%20String } ConnectorInput 2.9999 PythonAppFilter 3 KeystrokeFilter 3.1 ConnectorOutput 3.9999 // Application filter chain (noedit)(readonly)
Storage:Data%20Location string DataDirectory= ..\data ..\data % % // path to top level data directory (directory)
Storage:Session string SubjectName= BCI_004_Day3_Training_Session3 Name % % // subject alias
Storage:Session string SubjectSession= 001 001 % % // three-digit session number
Storage:Session string SubjectRun= 00 00 % % // two-digit run number
Storage:Documentation string ID_System= % // BCI2000 System Code
Storage:Documentation string ID_Amp= % // BCI2000 Amp Code
Storage:Documentation string ID_Montage= % // BCI2000 Cap Montage Code
Visualize:Timing int VisualizeTiming= 1 1 0 1 // visualize system timing (0=no, 1=yes) (boolean)
Visualize:Source%20Signal int VisualizeSource= 1 1 0 1 // visualize raw brain signal (0=no, 1=yes) (boolean)
Visualize:Source%20Signal int VisualizeSourceDecimation= auto auto % % // decimation factor for raw brain signal
Visualize:Source%20Signal int VisualizeSourceBufferSize= auto auto % % // number of blocks to aggregate before sending to operator
Visualize:Source%20Signal int VisualizeSourceTime= 2s 2s 0 % // how much time in Source visualization
Visualize:Source%20Signal int SourceMin= auto // raw signal vis Min Value
Visualize:Source%20Signal int SourceMax= auto // raw signal vis Max Value
Source:Buffering int SourceBufferSize= 2s 2s % % // size of data acquisition ring buffer (in blocks or seconds)
Source:Signal%20Properties int SourceCh= 24 24 1 % // number of digitized and stored channels
Source:Signal%20Properties int SampleBlockSize= 12 12 1 % // number of samples transmitted at a time
Source:Signal%20Properties float SamplingRate= 300 300 0.0 % // sample rate
Source:Signal%20Properties list ChannelNames= 24 P3 C3 F3 Fz F4 C4 P4 Cz Pz Fp1 Fp2 T3 T5 O1 O2 X3 X2 F7 F8 X1 A2 T6 T4 TRG // use ChannelNames or Montage to specify the order in which the channels are acquired
Source:SignalProperties list SourceChOffset= 24 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 % % 
Source:SignalProperties list SourceChGain= 24 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 % % 
System:DSI%20Headset string DSIAPIVersion= 1.15.1 // Version of the dynamic library
Source:DSI%20Headset string BufferedADC/DSISerialPort= COM3 COM4 % % // Check Bluetooth Settings, and/or Properties of the DSI Bluetooth device
Source:DSI%20Headset string DefaultReference= A1/2+A2/2 // Re-reference EEG sensors to this sensor unless otherwise specified
Source:DSI%20Headset list Montage= 0 // ChannelNames will be used instead if you leave this blank. Entries here may be numbers, or names that match what the headset thinks the channels are called.
Source:DSI%20Headset int ImpedanceDriverOn= 1 1 0 1 // Measure impedance continuously? (boolean)
Source:DSI%20Headset float BufferAhead= 60ms 60ms 0 % // forward buffering time constant to smooth the acquisition timing
Source:DSI%20Headset string HeadsetDescription= DSI24%20(rev.%20A)%20#4127 // e.g. model number and/or serial number and firmware revision
Visualize:Source%20Signal int VisualizeImpedances= 0 0 0 1 // Visualize impedance values from headset (boolean)
Source:Buffering%20Controller float BufferingControllerPeriod= 0.25s 0.25s 0 % // period with which to update estimated sampling frequency
Source:Buffering%20Controller float BufferingControllerSmoothing= 0.998 0.998 0 0.9999 // block-by-block exponential moving average smoothing coefficient applied to number of samples in buffer
Source:Buffering%20Controller float BufferingControllerGain= 5e-3 5e-3 0 % // overall multiplier for all PID coefficients
Source:Buffering%20Controller float BufferingControllerP= 1.0 1.0 0 % // P coefficient of PID controller
Source:Buffering%20Controller float BufferingControllerI= 5e-4 5e-4 0 % // I coefficient of PID controller
Source:Buffering%20Controller float BufferingControllerD= 20.0 20.0 0 % // D coefficient of PID controller
Source:OnlineProcessing intlist BufferedADC/TransmitChList= 1 * 
Storage:BCI2000FileWriter string FileFormat= dat // format of data file (readonly)
Storage:Documentation string StorageTime= % // time of beginning of data storage
Source:Source%20Filter int NotchFilter= 0 0 0 2 // Power line notch filter: 0: disabled, 1: at 50Hz, 2: at 60Hz (enumeration)
Source:Source%20Filter int HighPassFilter= 2 0 0 2 // Source high pass filter: 0: disabled, 1: at 0.1Hz, 2: at 1Hz (enumeration)
Source:Source%20Filter int LowPassFilter= 4 0 0 4 // Source low pass filter: 0: disabled, 1: at 9Hz, 2: at 30Hz, 3: at 40Hz, 4: at 70Hz (enumeration)
Source:Source%20Filter list UnfilteredChannels= 0 // names or indices of channels to omit from source filter
Filtering:IIR%20Filter int Rectification= 0 0 0 2 // Rectify output: 0 No Rectification, 1 Half-Wave, 2 Full-Wave (enumeration)
Source:Alignment int AlignChannels= 1 0 0 1 // align channels in time (0=no, 1=yes) (boolean)
Source:Alignment floatlist SourceChTimeOffset= 0 0 % % // time offsets for all source channels (may be empty)
Visualize:Processing%20Stages int VisualizeAlignmentFilter= 0 0 0 1 // Visualize AlignmentFilter output (boolean)
Source:Online%20Processing list TransmissionFilter/TransmitChList= 1 * // list of transmitted channels: Channel names may contain * and ? wildcards,  and character ranges enclosed in []; wildcard patterns may be negated by prepending an exclamation mark.  Ranges of channels may be specified using : or - to separate begin from end.
Visualize:Processing%20Stages int VisualizeTransmissionFilter= 0 0 0 1 // Visualize TransmissionFilter output (boolean)
Storage:Data%20Location string DataFile= $%7bSubjectName%7d$%7bSubjectSession%7d/$%7bSubjectName%7dS$%7bSubjectSession%7dR$%7bSubjectRun%7d.$%7bFileFormat%7d // name of data file relative to DataDirectory
System:Protocol int EventLink= 1 1 0 1 // Send events from Operator to Source module (boolean)
System:Command%20Line%20Arguments variant /DSISerialPort= COM3 COM3 COM3 COM3 
System:Core%20Connections string SignalSourceIP= 127.0.0.1 // (readonly)(noedit)
System:Core%20Connections string SignalSourcePort= 63438 // (readonly)(noedit)
System:Version matrix SignalSourceVersion= { Framework Revision Build Config Protocol } 1 3.6.6253.74 6253.74,%202021-03-24T18:10:32Z MSVC-19.21.27702.2-AMD64,%20release,%202021-03-26T15:44:59Z,%20schalkadmin@DESKTOP-OTQRNP6 USE_DYNAMIC_CRT:TRUE%20USE_OPENMP:ON%20USE_PRECOMPILED_HEADERS:ON%20USE_ASSERTS_IN_RELEASE_BUILDS:OFF 2.3 // SignalSource version information (noedit)(readonly)
System:Configuration matrix SignalSourceFilterChain= 9 { Filter%20Name Position%20String } DataIOFilter 0 DSISerialADC 1 NullFileWriter 1 BCI2000FileWriter 1 EDFFileWriter 1 GDFFileWriter 1 SourceFilter 1.01 AlignmentFilter 1.1 TransmissionFilter 1.2 // SignalSource filter chain (noedit)(readonly)
System:Randomization int /RandomSeed= 18634 0 % % // seed for the BCI2000 pseudo random number generator (readonly)
System:Randomization int /RandomizationWarning= 1 1 0 1 // warn if subsequent Runs have identical RandomSeed value (boolean)
% % /ARSpectrum/FirstBinCenter= 0Hz // warn if subsequent Runs have identical RandomSeed value (boolean)
% % /ARSpectrum/LastBinCenter= 30Hz // warn if subsequent Runs have identical RandomSeed value (boolean)
% % /ARSpectrum/BinWidth= 3Hz // warn if subsequent Runs have identical RandomSeed value (boolean)
% % /ARSpectrum/OutputType= 0 // warn if subsequent Runs have identical RandomSeed value (boolean)
% % /FFTSpectrum/FirstBinCenter= 0Hz // warn if subsequent Runs have identical RandomSeed value (boolean)
% % /FFTSpectrum/LastBinCenter= 30Hz // warn if subsequent Runs have identical RandomSeed value (boolean)
% % /FFTSpectrum/BinWidth= 3Hz // warn if subsequent Runs have identical RandomSeed value (boolean)
% % /FFTSpectrum/OutputType= 0 // warn if subsequent Runs have identical RandomSeed value (boolean)
System:State%20Vector int /StateVectorLength= 41 16 % % // length of the state vector in bytes (noedit)(readonly)
